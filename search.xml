<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>创建一个maven项目（web）</title>
      <link href="/2020/10/29/%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AAmaven%E9%A1%B9%E7%9B%AE%EF%BC%88web%EF%BC%89/"/>
      <url>/2020/10/29/%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AAmaven%E9%A1%B9%E7%9B%AE%EF%BC%88web%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>一、安装eclipse2019、jdk1.8、maven<br>下载maven：apache-maven-3.6.3-bin.zip<br>解压以后，设置环境变量：<br><img src="https://img-blog.csdnimg.cn/20200906063104519.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2lsZW9wYXJk,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>path中加上%MAVEN_HOME%\bin<br>验证一下：cmd 输入mvn -version ，显示内容如下则表示安装成功<br><img src="https://img-blog.csdnimg.cn/20200906063732410.png#pic_center" alt="在这里插入图片描述"><br>二、配置maven的仓库<br>首先打开maven文件夹apache-maven-3.6.3-&gt;conf-&gt;编辑setting.xml，设置仓库的路径和镜像：</p><pre><code>&lt;!-- maven存储库路径 --&gt;&lt;localRepository&gt;D:\maven\RepositoryMaven\repository&lt;/localRepository&gt;&lt;!-- 设置镜像：阿里云 --&gt;&lt;mirror&gt;  &lt;id&gt;alimaven&lt;/id&gt;  &lt;name&gt;aliyun maven&lt;/name&gt;  &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt;  &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;        &lt;/mirror&gt;</code></pre><p>设置好以后，将setting.xml复制到刚刚设置的仓库路径下：<br><img src="https://img-blog.csdnimg.cn/20200906065525726.png#pic_center" alt="在这里插入图片描述"></p><p>三、打开eclipse，file -&gt; new -&gt; maven project<br>选择项目的工作位置，然后next<br><img src="https://img-blog.csdnimg.cn/20200906063851863.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2lsZW9wYXJk,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>设置好以后，next<br><img src="https://img-blog.csdnimg.cn/20200906064025808.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2lsZW9wYXJk,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>group id：  指项目在maven本地仓库中的目录</p><p>artifact id：指项目在以上目录中的名字</p><p>version:      指项目名字的版本</p><p>package：输入group和artifact，会自动生成package，目录+名字=完整路径<br><img src="https://img-blog.csdnimg.cn/20200906064320532.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2lsZW9wYXJk,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><strong>eclipse中配置maven：</strong> window-&gt;preference-&gt;User Settings-&gt;设置User Settings的路径（也就是刚刚仓库路径下的setting.xml），下面的Local Repository会自动设置好的-&gt;apply</p><p><strong>接下来配置tomcat：</strong> window-&gt;preferences-&gt;Runtime Envirorment-&gt;add-&gt;选择下载好的tomcat的版本-&gt;Browse(下载好的tomcat文件的路径)-&gt;JRE(如果没有jdk1.8，继续后面步骤，如果有就选择它，然后finish)-&gt;Installed JRES-&gt;add-&gt;standard VM-&gt;next-&gt;之前安装jdk1.8的路径-&gt;可以设置一个自定义的JRE name-&gt;finish</p><p>如果jsp报错，可以右击项目-&gt;buildpath-&gt;configure-&gt;add Library-&gt;server time-&gt;选择刚刚配置好的tomcat</p><p>继续：</p><ol><li>右击项目-&gt;run as-&gt;maven generate-sources</li><li>project-&gt;clean</li><li>start tomcat</li><li>输入<a href="http://localhost:8080/项目名（例如：http://localhost:8080/maven-study/）" target="_blank" rel="noopener">http://localhost:8080/项目名（例如：http://localhost:8080/maven-study/）</a></li><li>最终显示hello world</li></ol><h2 id="最后整个项目如下："><a href="#最后整个项目如下：" class="headerlink" title="最后整个项目如下："></a>最后整个项目如下：</h2><p><img src="https://img-blog.csdnimg.cn/20200913072404219.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2lsZW9wYXJk,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ul><li>src/main/java：domain、dao层、service层、action层</li><li>src/main/resources：struts配置文件struts.xml、spring配置文件application.xml、hibernate配置文件hibernate.cfg.xml、jdbc.properties</li><li>webapp/WEB-INF：web.xml配置spring容器、监听器、过滤符、struts等，也报错静态资源</li><li>pom.xml配置maven依赖，包括需要导入的jar包依赖、插件plugin</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>xxl-job任务调度中心（简化版）</title>
      <link href="/2020/10/29/xxl-job%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6%E4%B8%AD%E5%BF%83%EF%BC%88%E7%AE%80%E5%8C%96%E7%89%88%EF%BC%89/"/>
      <url>/2020/10/29/xxl-job%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6%E4%B8%AD%E5%BF%83%EF%BC%88%E7%AE%80%E5%8C%96%E7%89%88%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h1><p>官网：<a href="https://www.xuxueli.com/xxl-job" target="_blank" rel="noopener">https://www.xuxueli.com/xxl-job</a><br>工具：IDEA+maven+MySQL</p><blockquote><p>由于官网上提供的是MySQL，所以推荐使用MySQL<br>也可以自行修改为Oracle，但是比较麻烦，不仅要将MySQL脚本改为Oracle，还要将mapper.xml文件中的语句进行修改，总之很烦很烦（亲身体会）。</p></blockquote><h1 id="二、下载xxl-job稳定版（这里以2-2-0为例）"><a href="#二、下载xxl-job稳定版（这里以2-2-0为例）" class="headerlink" title="二、下载xxl-job稳定版（这里以2.2.0为例）"></a>二、下载xxl-job稳定版（这里以2.2.0为例）</h1><p>官网提供了GITHUB和GITEE两种下载方式，自行下载。</p><p> 1）、 /xxl-job/doc/db/tables_xxl_job.sql脚本</p><p> 2）、 将下载好的xxl-job-2.2.0，按照maven格式将源码导入IDEA中，然后使用maven进行编译即可，直接使用compile和package可。（记得修改maven仓库路径）</p><h1 id="三、配置调度中心xxl-job-admin"><a href="#三、配置调度中心xxl-job-admin" class="headerlink" title="三、配置调度中心xxl-job-admin"></a>三、配置调度中心xxl-job-admin</h1><h2 id="3-1-pom"><a href="#3-1-pom" class="headerlink" title="3.1 pom"></a>3.1 pom</h2><p>这里主要修改你的MySQL的版本号，根据个人的MySQL配置选择相应的版本号</p><h2 id="3-2-application-properties"><a href="#3-2-application-properties" class="headerlink" title="3.2 application.properties"></a>3.2 application.properties</h2><p>这里修改数据源配置</p><h3 id="xxl-job-datasource"><a href="#xxl-job-datasource" class="headerlink" title="xxl-job, datasource"></a>xxl-job, datasource</h3><pre><code>spring.datasource.url=jdbc:mysql://127.0.0.1:3306/xxl_job-leo-zu?useUnicode=true&amp;characterEncoding=UTF-8&amp;autoReconnect=true&amp;serverTimezone=Asia/Shanghaispring.datasource.username=rootspring.datasource.password=123456spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver</code></pre><h2 id="3-3-启动项目"><a href="#3-3-启动项目" class="headerlink" title="3.3 启动项目"></a>3.3 启动项目</h2><p>上述配置完成以后，启动xxl-job-admin<br>访问调度中心地址：<a href="http://localhost:8080/xxl-job-admin" target="_blank" rel="noopener">http://localhost:8080/xxl-job-admin</a><br>默认登录账号密码：admin/123456<br><img src="https://img-blog.csdnimg.cn/20201029123509207.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2lsZW9wYXJk,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h1 id="四、配置部署-执行器项目"><a href="#四、配置部署-执行器项目" class="headerlink" title="四、配置部署 执行器项目"></a>四、配置部署 执行器项目</h1><p>这里可以直接使用xxl-job-2.2.0中的xxl-job-executor-sample-springboot，也可以配置自己的项目，步骤都如下：</p><h2 id="4-1-pom"><a href="#4-1-pom" class="headerlink" title="4.1 pom"></a>4.1 pom</h2><p>在pom文件中引入 xxl-job-core 的maven依赖</p><h2 id="4-2-application-properties"><a href="#4-2-application-properties" class="headerlink" title="4.2 application.properties"></a>4.2 application.properties</h2><p><strong>address：调度中心地址<br>appname：与调度中心配置的执行器名称一致<br>port：可以根据自己的情况设置，默认9999</strong></p><pre><code>xxl:job:admin:  addresses: http://127.0.0.1:8080/xxl-job-admin # 调度中心地址# 执行器通信Token[选填]，非空时启用accessToken:executor: #  appname: cloud-payment-service-executor  ip:  port: 9999  logpath: /data/applogs/xxl-job/jobhandler  logretentiondays: 10</code></pre><h2 id="4-3-执行器组件配置"><a href="#4-3-执行器组件配置" class="headerlink" title="4.3 执行器组件配置"></a>4.3 执行器组件配置</h2><p><img src="https://img-blog.csdnimg.cn/2020102912492870.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2lsZW9wYXJk,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><pre><code>package com.leopard.springcloud.config;import com.xxl.job.core.executor.impl.XxlJobSpringExecutor;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Value;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;/*** xxl-job config** @author xuxueli 2017-04-28*/@Configurationpublic class XxlJobConfig {private Logger logger = LoggerFactory.getLogger(XxlJobConfig.class);/** * 调度中心地址 */@Value("${xxl.job.admin.addresses}")private String adminAddresses;/** * 调度中心认证token */@Value("${xxl.job.accessToken}")private String accessToken;/** * 执行器名字 */@Value("${xxl.job.executor.appname}")private String appname;/** * 执行器地址 *///@Value("${xxl.job.executor.address}")//private String address;/** * 执行器ip，默认本机 */@Value("${xxl.job.executor.ip}")private String ip;/** * 执行器端口 */@Value("${xxl.job.executor.port}")private int port;/** * 跑批日志路径 */@Value("${xxl.job.executor.logpath}")private String logPath;/** * 跑批日志保留天数 */@Value("${xxl.job.executor.logretentiondays}")private int logRetentionDays;/** * 配置初始化 * @return * @author leo-zu 2020-10-28 21:29 */@Beanpublic XxlJobSpringExecutor xxlJobExecutor() {    logger.info("&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; xxl-job config init.");    XxlJobSpringExecutor xxlJobSpringExecutor = new XxlJobSpringExecutor();    xxlJobSpringExecutor.setAdminAddresses(adminAddresses);    xxlJobSpringExecutor.setAppname(appname);    // xxlJobSpringExecutor.setAddress(address);    xxlJobSpringExecutor.setIp(ip);    xxlJobSpringExecutor.setPort(port);    xxlJobSpringExecutor.setAccessToken(accessToken);    xxlJobSpringExecutor.setLogPath(logPath);    xxlJobSpringExecutor.setLogRetentionDays(logRetentionDays);    return xxlJobSpringExecutor;}/** * 针对多网卡、容器内部署等情况，可借助 "spring-cloud-commons" 提供的 "InetUtils" 组件灵活定制注册IP； * *      1、引入依赖： *          &lt;dependency&gt; *             &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; *             &lt;artifactId&gt;spring-cloud-commons&lt;/artifactId&gt; *             &lt;version&gt;${version}&lt;/version&gt; *         &lt;/dependency&gt; * *      2、配置文件，或者容器启动变量 *          spring.cloud.inetutils.preferred-networks: 'xxx.xxx.xxx.' * *      3、获取IP *          String ip_ = inetUtils.findFirstNonLoopbackHostInfo().getIpAddress(); */</code></pre><p>}</p><blockquote><p>上述配置完成好以后，就可以开始动手开发了。</p></blockquote><h1 id="五、开发一个项目"><a href="#五、开发一个项目" class="headerlink" title="五、开发一个项目"></a>五、开发一个项目</h1><h2 id="5-1-在调度中心配置执行器："><a href="#5-1-在调度中心配置执行器：" class="headerlink" title="5.1 在调度中心配置执行器："></a>5.1 在调度中心配置执行器：</h2><p>AppName要和之前项目中配置的appname一致<br>机器地址：一定要加上<strong>http://</strong>，否则会报无协议的错。然后加上主机地址和端口号<br><img src="https://img-blog.csdnimg.cn/20201029125214836.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2lsZW9wYXJk,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="5-2-新建调度任务"><a href="#5-2-新建调度任务" class="headerlink" title="5.2 新建调度任务"></a>5.2 新建调度任务</h2><p>JobHandler一定要和项目中的handler名称一致。<br>Cron表达式：设置定时任务的时间<br><img src="https://img-blog.csdnimg.cn/20201029125326618.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2lsZW9wYXJk,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="5-3-在项目中创建hadler"><a href="#5-3-在项目中创建hadler" class="headerlink" title="5.3 在项目中创建hadler"></a>5.3 在项目中创建hadler</h2><p><img src="https://img-blog.csdnimg.cn/20201029125739138.png#pic_center" alt="在这里插入图片描述"></p><p>由于新版，所以要加上@XxlJob(“PaymentJobHandler”)：支持单个类中开发多个任务方法</p><pre><code>package com.leopard.springcloud.job.handler;import com.xxl.job.core.biz.model.ReturnT;import com.xxl.job.core.handler.IJobHandler;import com.xxl.job.core.handler.annotation.XxlJob;import com.xxl.job.core.log.XxlJobLogger;import groovy.util.logging.Slf4j;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.stereotype.Component;/** * @author leo-zu * @create 2020-10-28 21:47 */@Slf4j@Componentpublic class PaymentJobHandler extends IJobHandler {    private static transient Logger logger = LoggerFactory.getLogger(PaymentJobHandler.class);    @Override    @XxlJob("PaymentJobHandler")    public ReturnT&lt;String&gt; execute(String param) throws Exception {        logger.info("HELLO WORLD!");        XxlJobLogger.log("hello world");        return SUCCESS;    }}</code></pre><h2 id="5-4-启动项目"><a href="#5-4-启动项目" class="headerlink" title="5.4 启动项目"></a>5.4 启动项目</h2><ul><li>启动项目</li><li>打开任务调度中心的执行任务</li></ul><p>这里我设置的任务是每分钟执行一次定时任务，所以每隔一分钟可以看到控制台打印信息：<br><img src="https://img-blog.csdnimg.cn/20201029130220159.png#pic_center" alt="在这里插入图片描述"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> xxl-job </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDEA </tag>
            
            <tag> xxl-job </tag>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建个人博客</title>
      <link href="/2020/02/29/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2020/02/29/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>本文在Windows下进行搭建个人博客。</strong><br><strong>基于hexo博客框架</strong></p></blockquote><ul><li>部署环境</li><li>初始化个人博客</li><li>写博客</li><li>把博客部署到云端</li><li>如何给博客换主题</li></ul><h2 id="一、部署环境"><a href="#一、部署环境" class="headerlink" title="一、部署环境"></a>一、部署环境</h2><p> 1）、下载node.js：<a href="https://nodejs.org/zh-cn/" target="_blank" rel="noopener">https://nodejs.org/zh-cn/</a>，下载长期支持版</p><p> 2）、正常安装，不再多讲</p><p> 3）、打开cmd（记得在管理员状态下运行），输入node -v和rpm -v查看是否安装成功。rpm是包管理器。</p><p> 4）、由于国内的镜像源很慢，所以安装淘宝的源</p><pre><code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></pre><p>查看是否安装好：<code>cnpm -v</code></p><p>5）、-g表示全局，所以全局安装hexo博客：</p><pre><code>cnpm install -g hexo-cli</code></pre><p>6）、验证一下是否安装成功：<code>hexo -v</code>，此时hexo安装完成。</p><p>7）、接下来开始使用hexo搭建个人博客<br>可以先查看自己当前的所在位置，当然了Windows就算了，因为前面就是路径。<br>由于我都C盘还剩20多个G，所以我觉得将博客放在D盘。<br>输入d:，到D盘下，mkdir blog来新建一个名为blog的文件夹。当然也可以直接在D盘下新建一个。<br>如果在之后出现了什么问题，直接把blog这个目录删除即可。</p><h2 id="二、初始化博客"><a href="#二、初始化博客" class="headerlink" title="二、初始化博客"></a>二、初始化博客</h2><p>1）、进入blog 文件夹下， 可以通过<code>pwd</code>来查看路径。<br>初始化：<code>hexo init</code> (linux下记得在前面加上sudo)，查看目录下。</p><p>2）、启动博客：<code>hexo s</code><br>浏览器中输入<code>http://localhost:4000</code>，得到如下hexo页面。</p><h2 id="三、写博客"><a href="#三、写博客" class="headerlink" title="三、写博客"></a>三、写博客</h2><p>1）、此时CTRL+C，终止。接着进入source/_posts下（cd source/_posts）然后新建一个md文件：<code>hexo n</code> <code>“我的第一篇博客文章”</code>。</p><blockquote><p>如果ls显示后，中文出现乱码，不要慌，我已经解决了。如下：<br>   在此先声明一点，网上有的让直接在注册表里面修改，但是打开注册表编辑器发现里面根本就没有所需要的那个文件或者项。有的就让在cmd里面去更改默认值或者属性。这些都不能解决此处问题。所以使用下面这个方法吧：在桌面新建一个cmd.reg（名称无所谓，自定义一个就行），然后将下面这串代码放进去：</p></blockquote><pre><code>Windows Registry Editor Version 5.00[HKEY_CLASSES_ROOT\Directory\Background\shell\OpenCmdHere][HKEY_CLASSES_ROOT\Directory\Background\shell\OpenCmdHere\command]@="Open Cmd here""Extended"=""[HKEY_CLASSES_ROOT\Directory\Background\shell\OpenCmdHere\command]@="cmd.exe -noexit -command Set-Location -literalPath '%V'"[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Command Processor]"AutoRun"="doskey ls=ls --show-control-chars --color&amp;&amp;set LANG=zh_CN.UTF-8"</code></pre><blockquote><p>保存后，双击这个文件，这样就将上面这些写如到注册表中了。可以看到最后一条语句就算修改为中文以及utf-8编码。</p></blockquote><p>2）、开始写博客。<br>使用<code>vim “我的第一篇博客文章.md”</code>，使用i开始编辑。</p><p>退出：esc–&gt;:–&gt;wq–&gt;回车。其中wq表示保存并退出，q!表示强制退出，不保存。其他的命令自行百度。<br>   退出以后，回退到blog目录下：<code>cd ../..</code><br>   清理一下：<code>hexo clean</code><br>   再重新生成Generate static files：<code>hexo generate</code><br>   最后开启hexo：<code>hexo s</code><br>现在来看看自己的博客。</p><p>非常好。下面开始将我们自己的博客部署到GitHub上公开使用。</p><h2 id="四、把博客部署到云端"><a href="#四、把博客部署到云端" class="headerlink" title="四、把博客部署到云端"></a>四、把博客部署到云端</h2><p>1）、再你的GitHub里面新建一个仓库，仓库名称必须要是你的用户名加.github.io</p><p><img src="/images/%E5%9B%BE%E7%89%871.png" alt=""></p><p>此时你的仓库已经弄好，但是它是空的。</p><p>2）、安装git的部署插件：</p><pre><code>cnpm install –-save hexo-deployer-git</code></pre><p>安装完成后，要编辑blog文件夹下的_config.yml，repo为你的仓库地址：</p><p><img src="/images/%E5%9B%BE%E7%89%872.png" alt=""></p><p><img src="/images/%E5%9B%BE%E7%89%873.png" alt=""></p><p>3）、部署到远端：<code>hexo d</code> (其中d表示deploy)<br> 输入GitHub账号和密码，此时就将电脑上的博客部署到GitHub上了</p><p>4）、此时看看你的GitHub仓库，现在在浏览器中输入地址：<a href="https://aileopard.github.io/">https://aileopard.github.io/</a></p><h2 id="五、如何给博客换主题"><a href="#五、如何给博客换主题" class="headerlink" title="五、如何给博客换主题"></a>五、如何给博客换主题</h2><p>现在发现博客不美观，那么如何更换博客主题呢？<br>1）、首先在GitHub上发现一个很好的主题：<a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="noopener">https://github.com/litten/hexo-theme-yilia</a><br>在终端的blog下，将这个主题克隆到blog文件夹下的themes/yilia中：</p><pre><code>git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia</code></pre><p>2）、如何应用下载好的主题呢？<br>编辑_config.yml，修改主题</p><p><img src="/images/%E5%9B%BE%E7%89%874.png" alt=""></p><p>然后保存，清理：<code>hexo clean</code><br>                  生成：<code>hexo g</code><br>                  启动：<code>hexo s</code><br>这时一键部署到GitHub上，<code>hexo d</code><br>刷新一会，就会看到你的个人博客主题变了。</p><blockquote><p>最后，可以根据自己的喜好去GitHub上找主题，这里要记得将其克隆到你的theme文件夹下，如果直接复制可能会出错。</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
